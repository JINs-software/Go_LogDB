syntax = "proto3";
package log.v1;
option go_package = "github.com/JINs-software/GoLogDB/api/log_v1";

message Record {
  bytes value = 1;
  uint64 offset = 2;
}

// gRPC 서비스
// (1) 서비스를 protobuf로 정의, (2) 프로토콜 버퍼를 클라이언트와 서버로 된 코드로 컴파일하여 구현

// 자료형 명시
// protoc 컴파일러가 Go 구조체로 변환해줄 메시지
message ProduceRequest {
  Record record = 1;      // 로그에 생성할 레코드를 가짐
}

message ProduceResponse {
  uint64 offset = 1;      // 레코드의 오프셋을 회신 (오프셋은 사실상 레코드 ID)
}

message ConsumeRequest {
  uint64 offset = 1;      // 로그에서 소비할 레코드의 오프셋을 가짐
}

message ConsumeResponse {
  Record record = 1;      // 오프셋에 저장된 레코드를 회신
}

// 서비스 정의
// 'service' 키워드: protoc 컴파일러가 생성해야 할 서비스라는 의미
service Log {
  // 'rpc' 키워드: rpc 키워드로 시작하는 각각의 줄은 서비스 엔드-포인트
  rpc Produce(ProduceRequest) returns (ProduceResponse) {}
  rpc Consume(ConsumeRequest) returns (ConsumeResponse) {}

  // 서버 측 스트리밍 RPC, 클라이언트 -> 서버 요청, 서버는 연속한 메시지들을 읽을 수 있는 스트림을 전달
  rpc ConsumeStream(ConsumeRequest) returns (stream ConsumeResponse) {}
  // 양방향 스트리밍 RPC, 클라-서버 양쪽이 읽고 쓸 수 있는 스트림을 이용해 서로 연속한 메시지들을 보냄
  rpc ProduceStream(stream ProduceRequest) returns (stream ProduceResponse) {}
}
